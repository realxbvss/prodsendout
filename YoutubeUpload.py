import os
import sys
import logging
import tempfile
import subprocess
import asyncio
import signal
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from cryptography.fernet import Fernet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent / ".env"
load_dotenv(env_path)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_ENV = ["TELEGRAM_TOKEN", "REDIS_URL", "ENCRYPTION_KEY"]
if missing := [var for var in REQUIRED_ENV if not os.getenv(var)]:
    raise EnvironmentError(f"Missing environment variables: {missing}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
storage = RedisStorage.from_url(os.getenv("REDIS_URL"))
dp = Dispatcher(storage=storage)
fernet = Fernet(os.getenv("ENCRYPTION_KEY").encode())


class UploadStates(StatesGroup):
    CONTENT_TYPE = State()
    MEDIA_UPLOAD = State()
    METADATA = State()
    VPN_CONFIG = State()
    PROXY = State()
    YOUTUBE_TOKEN = State()
    OAUTH_FLOW = State()


LOCK_KEY = "bot_lock"
LOCK_TTL = 60


def validate_metadata(metadata: Dict) -> bool:
    required_fields = ['title', 'description', 'tags']
    return all(field in metadata for field in required_fields)


async def get_user_data(user_id: int) -> Dict:
    data = await storage.redis.hgetall(f"user:{user_id}")
    return {k.decode(): v.decode() for k, v in data.items()}


async def update_user_data(user_id: int, data: Dict) -> None:
    await storage.redis.hset(f"user:{user_id}", mapping=data)


async def acquire_lock() -> bool:
    try:
        return await storage.redis.set(LOCK_KEY, "locked", nx=True, ex=LOCK_TTL)
    except Exception as e:
        logger.error(f"Redis error: {e}")
        return False


async def release_lock():
    try:
        await storage.redis.delete(LOCK_KEY)
    except Exception as e:
        logger.error(f"Failed to release lock: {e}")


async def shutdown(signal, loop):
    logger.info(f"Received exit signal {signal.name}...")
    await release_lock()
    await bot.close()
    await storage.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [task.cancel() for task in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    credentials = await get_valid_credentials(message.from_user.id)
    token_status = ""

    if credentials:
        expiry_time = credentials.expiry.replace(tzinfo=None)
        time_left = expiry_time - datetime.utcnow()

        if time_left.total_seconds() > 0:
            token_status = (
                "\n\nüîê –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "
                f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ {time_left // timedelta(hours=1)} —á. "
                f"{(time_left % timedelta(hours=1)) // timedelta(minutes=1)} –º–∏–Ω."
            )
        else:
            token_status = "\n\n‚ö†Ô∏è –í–∞—à —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

    await message.answer(
        "üé• *YouTube Upload Bot*\n\n"
        "üìö **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚ñ∂Ô∏è /upload - –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ\n"
        "üîë /auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YouTube (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!)\n"
        "‚öôÔ∏è /view_configs - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üóëÔ∏è /delete_config <–∫–ª—é—á> - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
        "‚ùó *–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º /upload –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /auth*\n"
        f"{token_status}\n\n"
        "üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ:**\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /auth\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3. –î–ª—è –≤–∏–¥–µ–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ MP4-—Ñ–∞–π–ª\n"
        "4. –î–ª—è –∞—É–¥–∏–æ+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ MP3 –∏ —Ñ–æ—Ç–æ\n\n"
        "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support",
        parse_mode="HTML"
    )


@dp.message(Command("auth"))
async def cmd_auth(message: types.Message, state: FSMContext):
    try:
        flow = InstalledAppFlow.from_client_secrets_file(
            "client_secrets.json",
            scopes=["https://www.googleapis.com/auth/youtube.upload"],
            redirect_uri="urn:ietf:wg:oauth:2.0:oob"
        )
        auth_url, _ = flow.authorization_url(prompt="consent")

        await state.set_state(UploadStates.OAUTH_FLOW)
        await state.update_data(flow=flow.to_json())

        await message.answer(
            "üîë –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø:\n"
            f"{auth_url}\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—é–¥–∞."
        )
    except Exception as e:
        logger.error(f"Auth error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")


@dp.message(UploadStates.OAUTH_FLOW)
async def handle_oauth_code(message: types.Message, state: FSMContext):
    try:
        code = message.text.strip()
        data = await state.get_data()
        flow_config = json.loads(data['flow'])
        flow = InstalledAppFlow.from_client_config(
            flow_config,
            scopes=["https://www.googleapis.com/auth/youtube.upload"],
            redirect_uri="urn:ietf:wg:oauth:2.0:oob"
        )

        flow.fetch_token(code=code)
        credentials = flow.credentials

        token_data = {
            'token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'token_uri': credentials.token_uri,
            'client_id': credentials.client_id,
            'client_secret': credentials.client_secret,
            'scopes': credentials.scopes,
            'expiry': credentials.expiry.isoformat()
        }

        encrypted = fernet.encrypt(json.dumps(token_data).encode())
        await update_user_data(message.from_user.id, {'youtube_token': encrypted.decode()})

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.clear()

    except Exception as e:
        logger.error(f"Token handling error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def get_valid_credentials(user_id: int) -> Optional[Credentials]:
    try:
        encrypted = await decrypt_user_data(user_id, "youtube_token")
        if not encrypted:
            return None

        token_data = json.loads(encrypted.decode())
        expiry = datetime.fromisoformat(token_data['expiry'])

        if datetime.utcnow() > expiry - timedelta(minutes=5):
            credentials = Credentials(
                token=token_data['token'],
                refresh_token=token_data['refresh_token'],
                token_uri=token_data['token_uri'],
                client_id=token_data['client_id'],
                client_secret=token_data['client_secret'],
                scopes=token_data['scopes']
            )
            credentials.refresh(Request())

            token_data.update({
                'token': credentials.token,
                'expiry': credentials.expiry.isoformat()
            })
            encrypted = fernet.encrypt(json.dumps(token_data).encode())
            await update_user_data(user_id, {'youtube_token': encrypted.decode()})

        return Credentials(**token_data)

    except Exception as e:
        logger.error(f"Credentials error: {str(e)}")
        return None


async def decrypt_user_data(user_id: int, key: str) -> Optional[bytes]:
    try:
        user_data = await get_user_data(user_id)
        if encrypted := user_data.get(key):
            decrypted = fernet.decrypt(encrypted.encode())
            return decrypted
        return None
    except Exception as e:
        logger.error(f"Decryption error: {str(e)}")
        return None


@dp.message(Command("view_configs"))
async def cmd_view_configs(message: types.Message):
    try:
        user_data = await get_user_data(message.from_user.id)
        configs = []
        for key in user_data:
            if key.startswith("vpn:") or key in ["proxy", "youtube_token"]:
                configs.append(f"üîë {key}")

        if configs:
            await message.answer(
                "üìÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(configs) +
                "\n\n‚ùï –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_config <–∫–ª—é—á>"
            )
        else:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("delete_config"))
async def cmd_delete_config(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!\n–ü—Ä–∏–º–µ—Ä: /delete_config vpn:MyVPN")
            return

        config_key = args[1]
        user_data = await get_user_data(message.from_user.id)

        if config_key not in user_data:
            await message.answer(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await storage.redis.hdel(f"user:{message.from_user.id}", config_key)
        await message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_key}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        logger.info(f"User {message.from_user.id} deleted config: {config_key}")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("upload"))
async def cmd_upload(message: types.Message, state: FSMContext):
    credentials = await get_valid_credentials(message.from_user.id)
    if not credentials:
        await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth")
        return

    await state.set_state(UploadStates.CONTENT_TYPE)
    await message.answer(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="video")],
            [types.InlineKeyboardButton(text="üñºÔ∏è –ê—É–¥–∏–æ+–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="audio_image")]
        ])
    )


@dp.callback_query(F.data.in_(["video", "audio_image"]))
async def content_type_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.update_data(content_type=callback.data)
        await callback.message.answer(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4)" if callback.data == "video"
            else "üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª (MP3)"
        )
        await state.set_state(UploadStates.MEDIA_UPLOAD)
        await callback.answer()
    except TelegramBadRequest as e:
        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å: {e}")


@dp.message(UploadStates.MEDIA_UPLOAD, F.audio)
async def audio_handler(message: types.Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.audio.file_id)
        path = Path("temp") / f"{message.from_user.id}_audio.mp3"
        await bot.download_file(file.file_path, path)
        await state.update_data(audio_path=str(path))
        await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG/PNG)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(UploadStates.MEDIA_UPLOAD, F.photo)
async def image_handler(message: types.Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.photo[-1].file_id)
        path = Path("temp") / f"{message.from_user.id}_image.jpg"
        await bot.download_file(file.file_path, path)
        await state.update_data(image_path=str(path))

        data = await state.get_data()
        if 'audio_path' in data and 'image_path' in data:
            await state.set_state(UploadStates.METADATA)
            await message.answer(
                "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
                "<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\n"
                "<b>–¢–µ–≥–∏</b> (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
                "<b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b> (YYYY-MM-DDTHH:MM:SSZ –∏–ª–∏ '—Å–µ–π—á–∞—Å')\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ú–æ–µ –≤–∏–¥–µ–æ\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–≥–æ –≤–∏–¥–µ–æ\n"
                "—Ç–µ–≥1,—Ç–µ–≥2\n"
                "—Å–µ–π—á–∞—Å",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(UploadStates.METADATA)
async def metadata_handler(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split('\n')
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

        metadata = {
            'title': parts[0],
            'description': parts[1],
            'tags': parts[2].split(','),
            'publish_at': parts[3] if len(parts) > 3 else '—Å–µ–π—á–∞—Å'
        }

        if not validate_metadata(metadata):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")

        await state.update_data(metadata=metadata)
        await message.answer(
            "‚öôÔ∏è –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN/–ü—Ä–æ–∫—Å–∏?",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üõ°Ô∏è –î–∞", callback_data="setup_network")],
                [types.InlineKeyboardButton(text="üöÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_network")]
            ])
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.callback_query(F.data == "setup_network")
async def setup_network_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üîí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üõ°Ô∏è VPN", callback_data="setup_vpn")],
            [types.InlineKeyboardButton(text="üîó –ü—Ä–æ–∫—Å–∏", callback_data="setup_proxy")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "setup_vpn")
async def setup_vpn_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ VPN –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "1. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø VPN (OpenVPN/WireGuard) –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "–ü—Ä–∏–º–µ—Ä: <code>OpenVPN; MyVPN</code>"
    )
    await state.set_state(UploadStates.VPN_CONFIG)
    await callback.answer()


@dp.message(UploadStates.VPN_CONFIG, F.document)
async def vpn_config_handler(message: types.Message, state: FSMContext, bot: Bot):
    try:
        if not message.caption or ";" not in message.caption:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞!\n"
                "üìù –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "<code>OpenVPN; MyVPN</code>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."
            )
            return

        vpn_type, name = message.caption.split(";", 1)
        vpn_type = vpn_type.strip()
        name = name.strip()

        file = await bot.get_file(message.document.file_id)
        path = Path("temp") / f"{message.from_user.id}_vpn.conf"

        await bot.download_file(file.file_path, path)
        with open(path, "rb") as config_file:
            result = await save_encrypted_file(message.from_user.id, config_file.read(), f"vpn:{name}")

        await message.answer(f"‚úÖ {result}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
        path.unlink()
        await start_upload_process(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ VPN: {str(e)}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def save_encrypted_file(user_id: int, file_bytes: bytes, prefix: str) -> str:
    encrypted = fernet.encrypt(file_bytes)
    await update_user_data(user_id, {prefix: encrypted.decode()})
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {prefix}")
    return "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"


@dp.message(UploadStates.PROXY)
async def proxy_handler(message: types.Message, state: FSMContext):
    try:
        if not any(message.text.startswith(proto) for proto in ("http://", "https://", "socks5://")):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")

        await save_encrypted_file(message.from_user.id, message.text.encode(), "proxy")
        await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await start_upload_process(message, state)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def start_upload_process(message: types.Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        user_data = await get_user_data(message.from_user.id)
        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
        if proxy_data := await decrypt_user_data(message.from_user.id, "proxy"):
            proxy = proxy_data.decode()
            os.environ.update({'HTTP_PROXY': proxy, 'HTTPS_PROXY': proxy})
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–∫—Å–∏: {proxy}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ YouTube
        credentials = await get_valid_credentials(message.from_user.id)
        if not credentials:
            await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as tmp:
            tmp.write(json.dumps({
                "installed": {
                    "client_id": credentials.client_id,
                    "client_secret": credentials.client_secret,
                    "redirect_uris": ["http://localhost"]
                }
            }).encode())
            token_path = tmp.name
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω: {token_path}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN (–µ—Å–ª–∏ –µ—Å—Ç—å)
        vpn_connected = False
        for key in user_data:
            if key.startswith("vpn:"):
                try:
                    vpn_data = await decrypt_user_data(message.from_user.id, key)
                    vpn_type = key.split(":")[1]
                    with tempfile.NamedTemporaryFile(delete=False) as vpn_file:
                        vpn_file.write(vpn_data)
                        vpn_path = vpn_file.name

                    cmd = ["openvpn", "--config", vpn_path] if vpn_type == "openvpn" else ["wg-quick", "up", vpn_path]
                    subprocess.run(cmd, check=True, timeout=30)
                    vpn_connected = True
                    logger.info(f"VPN {vpn_type} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN: {str(e)}")
                finally:
                    Path(vpn_path).unlink(missing_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –∞—É–¥–∏–æ+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        if state_data.get('content_type') == 'audio_image':
            video_path = await create_video_from_media(
                state_data['image_path'],
                state_data['audio_path']
            )
            logger.info(f"–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
        else:
            video_path = state_data.get('video_path')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
        service = await asyncio.to_thread(build_youtube_service, token_path)
        video_id = await asyncio.to_thread(upload_video, service, video_path, state_data['metadata'])
        await message.answer(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! ID: {video_id}")
        logger.info(f"–í–∏–¥–µ–æ {video_id} –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", exc_info=True)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file in ['video_path', 'audio_path', 'image_path']:
            if path := state_data.get(file):
                Path(path).unlink(missing_ok=True)
        await state.clear()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")


def build_youtube_service(token_path: str):
    flow = InstalledAppFlow.from_client_secrets_file(
        token_path,
        scopes=["https://www.googleapis.com/auth/youtube.upload"]
    )
    credentials = flow.run_local_server(port=8080)
    os.unlink(token_path)
    return build("youtube", "v3", credentials=credentials)


def upload_video(service, video_path: str, metadata: Dict) -> str:
    request_body = {
        "snippet": {
            "title": metadata['title'],
            "description": metadata['description'],
            "tags": metadata['tags'],
            "categoryId": "22"
        },
        "status": {
            "privacyStatus": "public",
            "publishAt": metadata.get('publish_at'),
            "selfDeclaredMadeForKids": False
        }
    }

    media_file = MediaFileUpload(video_path, resumable=True)
    request = service.videos().insert(
        part="snippet,status",
        body=request_body,
        media_body=media_file
    )
    response = request.execute()
    return response['id']


async def create_video_from_media(image_path: str, audio_path: str) -> str:
    output_path = tempfile.mktemp(suffix=".mp4", dir="temp")
    cmd = [
        "ffmpeg",
        "-loop", "1",
        "-i", image_path,
        "-i", audio_path,
        "-c:v", "libx264",
        "-tune", "stillimage",
        "-c:a", "aac",
        "-b:a", "192k",
        "-pix_fmt", "yuv420p",
        "-shortest",
        "-y", output_path
    ]
    proc = await asyncio.create_subprocess_exec(*cmd)
    await proc.wait()
    return output_path


async def main():
    try:
        if not await acquire_lock():
            logger.error("Bot already running! Exiting...")
            sys.exit(1)

        loop = asyncio.get_running_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig,
                lambda: asyncio.create_task(shutdown(sig, loop))
            )

        Path("temp").mkdir(exist_ok=True)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Critical error: {str(e)}", exc_info=True)
    finally:
        await release_lock()
        for f in Path("temp").glob("*"):
            f.unlink(missing_ok=True)
        logger.info("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())