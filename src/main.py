import os
import sys
import logging
import tempfile
import subprocess
import asyncio
import signal
import json
from datetime import datetime, timezone, UTC
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta, timezone
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional
from aiogram.fsm.storage.base import StorageKey  # –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–º–ø–æ—Ä—Ç—ã
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils import keyboard
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest

from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from cryptography.fernet import Fernet

from moviepy.editor import ImageClip, AudioFileClip

from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
Path("temp").mkdir(exist_ok=True)
Path("logs").mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/youtube_bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

env_path = Path(__file__).parent / ".env"
load_dotenv(env_path)

REQUIRED_ENV = ["TELEGRAM_TOKEN", "REDIS_URL", "ENCRYPTION_KEY"]
if missing := [var for var in REQUIRED_ENV if not os.getenv(var)]:
    logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing}")
    sys.exit(1)

try:
    storage = RedisStorage.from_url(
        os.getenv("REDIS_URL"),
        connection_kwargs={
            "retry_on_timeout": True,
            "socket_connect_timeout": 5,
            "health_check_interval": 30
        }
    )
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")
    sys.exit(1)

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher(storage=storage)
fernet = Fernet(os.getenv("ENCRYPTION_KEY").encode())


# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
class UploadStates(StatesGroup):
    OAUTH_FLOW = State()
    CONTENT_TYPE = State()        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    MEDIA_UPLOAD = State()        # –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    PHOTO_UPLOAD = State()        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    AUDIO_UPLOAD = State()        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
    VIDEO_GENERATION = State()    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ+MP3
    VPN_CONFIG = State()          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN –¥–ª—è –∫–∞–Ω–∞–ª–∞
    CHANNEL_SELECT = State()      # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
    MULTI_CHANNEL = State()       # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤ (1-10)
    METADATA_INPUT = State()       # –í–≤–æ–¥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    VPN_CHOICE = State()           # –í—ã–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ VPN
    VPN_CONFIG_UPLOAD = State()    # –ó–∞–≥—Ä—É–∑–∫–∞ VPN-–∫–æ–Ω—Ñ–∏–≥–∞


# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

# ================== –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û ==================
async def upload_video(user_id: int, video_path: str, metadata: dict) -> str:
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        credentials = await get_valid_credentials(user_id)
        if not credentials:
            raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /auth.")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ YouTube
        youtube = build("youtube", "v3", credentials=credentials)

        if len(metadata['tags']) > 10:
            raise ValueError("–ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–æ–≤")
        if len(metadata['title']) > 100:
            raise ValueError("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        request = youtube.videos().insert(
            part="snippet,status",
            body={
                "snippet": {
                    "title": metadata['title'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º metadata –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    "description": metadata['description'],
                    "tags": metadata['tags'],
                    "categoryId": "10"
                },
                "status": {
                    "privacyStatus": "private",
                    "publishAt": metadata['publish_time'] if metadata['is_scheduled'] else None,
                    "selfDeclaredMadeForKids": False
                }
            },
            media_body=MediaFileUpload(video_path)
        )
        response = request.execute()
        return response["id"]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}", exc_info=True)
        raise

async def get_user_data(user_id: int) -> Dict:
    try:
        data = await storage.redis.hgetall(f"user:{user_id}")
        return {k.decode(): v.decode() for k, v in data.items()}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")
        return {}


async def update_user_data(user_id: int, data: Dict) -> None:
    try:
        await storage.redis.hset(f"user:{user_id}", mapping=data)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")

async def acquire_lock() -> bool:
    try:
        return await storage.redis.set("bot_lock", "1", nx=True, ex=60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
        return False


async def release_lock():
    try:
        await storage.redis.delete("bot_lock")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")


async def run_subprocess(cmd: list) -> bool:
    try:
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await proc.wait()
        return proc.returncode == 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        return False


async def decrypt_user_data(user_id: int, key: str) -> Optional[bytes]:
    try:
        user_data = await get_user_data(user_id)
        if encrypted := user_data.get(key):
            return fernet.decrypt(encrypted.encode())
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return None


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:

        if not await storage.redis.ping():
            raise ConnectionError("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        key = StorageKey(
            chat_id=message.chat.id,  # ID —á–∞—Ç–∞
            user_id=message.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_id=bot.id  # ID –±–æ—Ç–∞
        )
        await storage.set_state(key=key, state=None)

        credentials = await get_valid_credentials(message.from_user.id)
        token_status = ""

        if credentials:
            from datetime import datetime, timezone
            expiry_time = datetime.fromisoformat(credentials.expiry).replace(tzinfo=timezone.utc)
            time_left = expiry_time - datetime.now(timezone.utc)

            if time_left.total_seconds() > 0:
                token_status = (
                    f"\n\nüîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ "
                    f"{time_left // timedelta(hours=1)} —á. "
                    f"{(time_left % timedelta(hours=1)) // timedelta(minutes=1)} –º–∏–Ω."
                )
            else:
                token_status = "\n\n‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth"

        commands = (
            "üé• *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` ‚Äî –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/auth` ‚Äî –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YouTube\n"
            "‚Ä¢ `/upload` ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n"
            "‚Ä¢ `/view_configs` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏\n"
            "‚Ä¢ `/delete_config` ‚Äî –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥\n"
            "‚Ä¢ `/guide` ‚Äî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "‚Ä¢ `/setup_channels` ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ `/cancel` ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        )
        await message.answer(commands, parse_mode="MarkdownV2")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.")

@dp.callback_query(UploadStates.VPN_CHOICE, F.data.in_(["use_vpn", "no_vpn"]))
async def handle_vpn_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "use_vpn":
        await callback.message.answer(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª VPN-–∫–æ–Ω—Ñ–∏–≥–∞ (.ovpn) –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–Ω—Ñ–∏–≥–∞")
        await state.set_state(UploadStates.VPN_CONFIG_UPLOAD)
    else:
        await state.update_data(vpn_config=None)
        await handle_channel_select(callback.message, state)
    await callback.answer()


@dp.message(UploadStates.VPN_CONFIG_UPLOAD)
async def handle_vpn_config_upload(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
        if not message.document:
            await message.answer("‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª!")
            return

        if not message.caption:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É!")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        config_name = message.caption.strip().split('\n')[0].strip()
        if not config_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        path = Path("temp") / f"{message.from_user.id}_vpn.ovpn"
        await bot.download_file(file.file_path, path)

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(path, 'r') as f:
            config_data = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥–∞
        if "client" not in config_data:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ OpenVPN!")
            path.unlink(missing_ok=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(vpn_config={
            'name': config_name,
            'data': config_data
        })

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        path.unlink(missing_ok=True)

        await message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ '{config_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await handle_channel_select(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VPN: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞!")

@dp.message(Command("auth"))
async def cmd_auth(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª client_secrets.json.")
    await state.set_state(UploadStates.OAUTH_FLOW)

# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–¥ (–∑–∞–≥–ª—É—à–∫–∏):
async def get_user_channels(user_id: int) -> list:
    return []  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É

async def get_vpn_for_channel(user_id: int, channel_id: str) -> str:
    encrypted = await storage.redis.hget(f"user:{user_id}", f"vpn:{channel_id}")
    return fernet.decrypt(encrypted).decode() if encrypted else ""


def connect_to_vpn(config: str):
    try:
        if not config.startswith("client"):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥–∞ OpenVPN")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ovpn") as f:
            f.write(config.encode())
            f.flush()  # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥
        result = subprocess.run(
            ["sudo", "openvpn", "--config", f.name],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=15,
            text=True
        )
        logger.info("VPN –ø–æ–¥–∫–ª—é—á—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e.stderr.strip()}"
        if "AUTH_FAILED" in error_msg:
            error_msg += "\nüîë –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ VPN"
        logger.error(error_msg)
        raise ValueError(error_msg)
    except subprocess.TimeoutExpired:
        error_msg = "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN"
        logger.error(error_msg)
        raise ValueError(error_msg)

    finally:
        if 'f' in locals():
            os.unlink(f.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

async def save_channel(user_id: int, channel_name: str, channel_id: str):
    await storage.redis.hset(
        f"user:{user_id}:channels",
        channel_id,  # –ö–ª—é—á - channel_id
        channel_name  # –ó–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    )

async def get_user_channels(user_id: int) -> list:
    channels = await storage.redis.hgetall(f"user:{user_id}:channels")
    return [(k.decode(), v.decode()) for k, v in channels.items()]


@dp.message(Command("setup_channels"))
async def cmd_setup_channels(message: Message, state: FSMContext):
    try:
        channels = await get_youtube_channels(message.from_user.id)
        if not channels:
            await message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n1. –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n2. –í—ã –¥–∞–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YouTube'")
            return

        await storage.redis.delete(f"user:{message.from_user.id}:channels")
        await storage.redis.hset(
            f"user:{message.from_user.id}:channels",
            mapping={channel_id: name for channel_id, name in channels}
        )
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("setup_vpn"))
async def cmd_setup_vpn(message: Message, state: FSMContext):
    channels = await get_user_channels(message.from_user.id)
    if not channels:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ /setup_channels")
        return

    await state.update_data(channels=channels, current_channel=0)
    await ask_for_vpn_config(message, state)


async def ask_for_vpn_config(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data["current_channel"] + 1
    channels = data["channels"]

    if current <= len(channels):
        channel_id, channel_name = channels[current - 1]
        await message.answer(
            f"üîê –û—Ç–ø—Ä–∞–≤—å—Ç–µ VPN-–∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_name}\n"
            f"(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ovpn)"
        )
        await state.update_data(current_channel=current, current_channel_id=channel_id)
    else:
        await message.answer("‚úÖ –í—Å–µ VPN-–∫–æ–Ω—Ñ–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()

@dp.message(UploadStates.OAUTH_FLOW, F.document)
async def handle_oauth_file(message: types.Message, state: FSMContext, bot: Bot):
    path = None
    try:
        if message.document.mime_type != "application/json":
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª client_secrets.json")

        file = await bot.get_file(message.document.file_id)
        path = Path("temp") / f"{message.from_user.id}_client_secrets.json"
        await bot.download_file(file.file_path, path)

        if not path.exists():
            logger.error("–§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            return

        with open(path, "r") as f:
            data = json.load(f)
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {json.dumps(data, indent=2)}")

        # –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é "installed"
        if "installed" not in data:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'installed'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return

        installed_data = data["installed"]  # –ò–∑–º–µ–Ω–µ–Ω–æ: –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ "installed"
        required_fields = ["client_id", "client_secret", "redirect_uris"]
        if not all(field in installed_data for field in required_fields):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –°–∫–∞—á–∞–π—Ç–µ client_secrets.json –¥–ª—è Desktop.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ OAuth-–ø–æ—Ç–æ–∫–∞
        flow = InstalledAppFlow.from_client_secrets_file(
            str(path),
            scopes=["https://www.googleapis.com/auth/youtube"],  # –£–ø—Ä–æ—Å—Ç–∏–ª–∏ –¥–æ –æ–¥–Ω–æ–≥–æ scope
            redirect_uri="urn:ietf:wg:oauth:2.0:oob"
        )
        auth_url, _ = flow.authorization_url(prompt="consent")  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º auth_url –∑–¥–µ—Å—å

        await state.update_data(
            client_config=data["installed"],  # –í–∞–∂–Ω–æ!
            scopes=["https://www.googleapis.com/auth/youtube.readonly", "https://www.googleapis.com/auth/youtube.upload"],
            redirect_uri="urn:ietf:wg:oauth:2.0:oob"
        )

        await message.answer(
            f"üîë –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}\n\n"
            "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É."
        )

    except json.JSONDecodeError:
        logger.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
        await message.answer("‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
    finally:
        if path:
            path.unlink(missing_ok=True)

async def generate_video(user_id: int, state: FSMContext):
    data = await state.get_data()
    output_path = Path("temp") / f"{user_id}_video.mp4"

    try:
        audio = AudioFileClip(data["audio_path"])
        clip = ImageClip(data["photo_path"]).set_duration(audio.duration)
        clip = clip.set_audio(audio)
        clip.write_videofile(str(output_path), fps=24)
        await state.update_data(video_path=str(output_path))
        await bot.send_message(
            user_id,
            "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ\n–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (YYYY-MM-DDTHH:MM:SSZ –∏–ª–∏ '—Å–µ–π—á–∞—Å')\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n–ú–æ–µ –≤–∏–¥–µ–æ\n–û–ø–∏—Å–∞–Ω–∏–µ\n—Ç–µ–≥1,—Ç–µ–≥2\n—Å–µ–π—á–∞—Å"
        )
        await state.set_state(UploadStates.METADATA_INPUT)

    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("channel_select"))
async def cmd_channel_select(message: Message, state: FSMContext):
    await handle_channel_select(message, state)

@dp.message(UploadStates.PHOTO_UPLOAD, F.photo)
async def handle_photo(message: Message, state: FSMContext, bot: Bot):
    file = await bot.get_file(message.photo[-1].file_id)
    path = Path("temp") / f"{message.from_user.id}_photo.jpg"
    await bot.download_file(file.file_path, path)
    await state.update_data(photo_path=str(path))
    await message.answer("üéµ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ MP3-–∞—É–¥–∏–æ:")
    await state.set_state(UploadStates.AUDIO_UPLOAD)


@dp.message(UploadStates.METADATA_INPUT)
async def handle_metadata(message: Message, state: FSMContext):
    from datetime import datetime
    from dateutil.parser import parse
    try:
        parts = message.text.split('\n')
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        title = parts[0].strip()
        description = parts[1].strip()
        tags = [tag.strip() for tag in parts[2].split(',')]
        publish_time = parts[3].strip().lower()

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        if publish_time != '—Å–µ–π—á–∞—Å':
            from dateutil.parser import parse
            parse(publish_time)
            is_scheduled = True
        else:
            from datetime import UTC
            publish_time = datetime.now(UTC).isoformat().replace("+00:00", "Z")
            is_scheduled = False

        await state.update_data(
            video_metadata={
                'title': title,
                'description': description,
                'tags': tags,
                'publish_time': publish_time,
                'is_scheduled': is_scheduled
            }
        )

        # –ó–∞–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ VPN
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="use_vpn"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_vpn")]
        ])
        await message.answer("üîê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN/–ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏?", reply_markup=keyboard)
        await state.set_state(UploadStates.VPN_CHOICE)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

@dp.message(UploadStates.AUDIO_UPLOAD, F.audio)
async def handle_audio(message: Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.audio.file_id)
        path = Path("temp") / f"{message.from_user.id}_audio.mp3"
        await bot.download_file(file.file_path, path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
        audio = AudioFileClip(str(path))
        if audio.duration > 600:  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            await message.answer("‚ùå –ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 10 –º–∏–Ω—É—Ç!")
            return

        await state.update_data(audio_path=str(path))
        await message.answer("‚è≥ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ...")
        await state.set_state(UploadStates.VIDEO_GENERATION)
        await generate_video(message.from_user.id, state)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(UploadStates.CONTENT_TYPE, F.data.in_(["ready_video", "photo_audio"]))
async def handle_content_type(callback: CallbackQuery, state: FSMContext):
    if callback.data == "ready_video":
        await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        await state.set_state(UploadStates.MEDIA_UPLOAD)
    else:
        await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        await state.set_state(UploadStates.PHOTO_UPLOAD)
    await callback.answer()

@dp.callback_query(UploadStates.CONTENT_TYPE, F.data == "multi_channel")
async def handle_multi_channel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (1-10)")
    await callback.answer()

@dp.message(Command("upload"))
async def cmd_upload(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ", callback_data="ready_video"),
                InlineKeyboardButton(text="–§–æ—Ç–æ + MP3", callback_data="photo_audio")
            ],
            [
                InlineKeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data="multi_channel")
            ]
        ]
    )
    await message.answer("üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=keyboard)
    await state.set_state(UploadStates.CONTENT_TYPE)
@dp.message(UploadStates.MEDIA_UPLOAD, F.video)
async def handle_video_upload(message: types.Message, state: FSMContext):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video = message.video
        file = await bot.get_file(video.file_id)
        path = Path("temp") / f"{message.from_user.id}_video.mp4"
        await bot.download_file(file.file_path, path)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
        await message.answer("‚è≥ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ YouTube...")
        video_id = await upload_video(
            user_id=message.from_user.id,
            video_path=str(path),
            title="–ú–æ–µ –≤–∏–¥–µ–æ",
            description="–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
        )

        await message.answer(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! ID: {video_id}")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
    finally:
        if path.exists():
            path.unlink()

@dp.message(Command("vpn"))
async def cmd_vpn(message: Message, state: FSMContext):
    await message.answer("üîê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ VPN –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ovpn:")
    await state.set_state(UploadStates.VPN_CONFIG)

async def save_vpn_config(user_id: int, channel_id: str, config: str):
    encrypted = fernet.encrypt(config.encode())
    await storage.redis.hset(
        f"user:{user_id}",
        f"vpn:{channel_id}",
        encrypted.decode()
    )


@dp.message(UploadStates.VPN_CONFIG, F.document)
async def handle_vpn_config(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        channel_id = data["current_channel_id"]

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        file = await bot.get_file(message.document.file_id)
        path = Path("temp") / f"{message.from_user.id}_vpn.ovpn"
        await bot.download_file(file.file_path, path)

        with open(path, "r") as f:
            config = f.read()

        await save_vpn_config(message.from_user.id, channel_id, config)
        await ask_for_vpn_config(message, state)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        path.unlink(missing_ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query(UploadStates.MULTI_CHANNEL)
async def handle_multi_channel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (1-10):")

async def upload_to_multiple_channels(user_id: int, video_path: str, state: FSMContext):
    data = await state.get_data()
    channels = await storage.redis.hgetall(f"user:{user_id}:channels")
    for channel_num, channel_name in channels.items():
        channel_id = channel_num.decode().split("_")[1]

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN
        vpn_config = await get_vpn_for_channel(user_id, channel_id)
        connect_to_vpn(vpn_config)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        await upload_to_youtube(
            user_id=user_id,
            video_path=video_path,
            channel_id=channel_id,
            metadata=data['video_metadata']  # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        )

        await bot.send_message(
            user_id,
            f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_name.decode()}"
        )
    for channel_id, channel_name in channels:
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ VPN –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'vpn_config' in data:
            connect_to_vpn(data['vpn_config']['data'])

        await upload_to_youtube(
            user_id=user_id,
            video_path=video_path,
            channel_id=channel_id,
            metadata=data['video_metadata']
        )


async def get_youtube_channels(user_id: int) -> list:
    try:
        credentials = await get_valid_credentials(user_id)
        if not credentials:
            return []

        youtube = build("youtube", "v3", credentials=credentials)
        request = youtube.channels().list(
            part="snippet",
            mine=True,
            managedByMe=True  # –î–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        response = request.execute()
        return [
            (item["id"], item["snippet"]["title"])
            for item in response.get("items", [])
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
        return []


@dp.message(UploadStates.CHANNEL_SELECT)
async def handle_channel_select(message: Message, state: FSMContext):
    try:
        channels = await get_user_channels(message.from_user.id)
        if not channels:
            await message.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_channels")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=id)]
                             for id, name in channels])
        await message.answer("üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
        await state.set_state(UploadStates.CHANNEL_SELECT)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def upload_to_youtube(user_id: int, video_path: str, channel_id: str, metadata: dict):
    try:
        credentials = await get_valid_credentials(user_id)
        if not credentials:
            raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        youtube = build("youtube", "v3", credentials=credentials)
        request = youtube.videos().insert(
            part="snippet,status",
            body={
                "snippet": {
                    "title": f"Video for {channel_id}",
                    "description": "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
                    "categoryId": "22"
                },
                "status": {"privacyStatus": "private"}
            },
            media_body=MediaFileUpload(video_path)
        )
        response = request.execute()
        return response["id"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ôªÔ∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")

@dp.callback_query(UploadStates.CHANNEL_SELECT)
async def handle_channel_selection(callback: CallbackQuery, state: FSMContext):
    try:
        channel_id = callback.data
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ Redis, –∞ –Ω–µ –∏–∑ Google API
        channels = await get_user_channels(callback.from_user.id)
        channel_name = next((name for id, name in channels if id == channel_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")

        if channel_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª":
            await callback.message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        await state.update_data(selected_channel=channel_id)
        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channel_name}")
        await show_content_type_menu(callback.message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}")


async def show_content_type_menu(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ", callback_data="ready_video"),
                InlineKeyboardButton(text="–§–æ—Ç–æ + MP3", callback_data="photo_audio")
            ],
            [
                InlineKeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data="multi_channel")
            ]
        ]
    )
    await message.answer("üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=keyboard)
    await state.set_state(UploadStates.CONTENT_TYPE)

@dp.message(UploadStates.OAUTH_FLOW)
async def handle_oauth_code(message: types.Message, state: FSMContext):
    try:
        code = message.text.strip()
        data = await state.get_data()

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        logger.debug(f"client_config: {data['client_config']}")
        logger.debug(f"scopes: {data['scopes']}")
        logger.debug(f"redirect_uri: {data['redirect_uri']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all(key in data for key in ["client_config", "scopes", "redirect_uri"]):
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ client_secrets.json!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ OAuth-–ø–æ—Ç–æ–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º client_config
        flow = InstalledAppFlow.from_client_config(
            client_config={"installed": data["client_config"]},
            scopes=data["scopes"],
            redirect_uri=data["redirect_uri"]
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        flow.fetch_token(code=code)
        credentials = flow.credentials

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token_data = {
            "token": credentials.token,
            "refresh_token": credentials.refresh_token,
            "expiry": credentials.expiry.isoformat(),
            "client_id": credentials.client_id,
            "client_secret": credentials.client_secret,
            "token_uri": credentials.token_uri,
            "scopes": credentials.scopes
        }
        encrypted = fernet.encrypt(json.dumps(token_data).encode())
        await update_user_data(message.from_user.id, {"youtube_token": encrypted.decode()})

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /upload.")
        await state.clear()

        channels = await get_youtube_channels(message.from_user.id)
        if not channels:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            return

        if len(channels) == 1:
            await state.update_data(selected_channel=channels[0][0])
            await message.answer(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channels[0][1]}")
            await show_content_type_menu(message)
        else:
            await show_channel_selection(message, channels, state)

        await message.answer("üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard)
        await state.set_state(UploadStates.CHANNEL_SELECT)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def show_channel_selection(message: Message, channels: list, state: FSMContext):
    try:
        if not channels:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return

        buttons = []
        for channel_id, channel_name in channels:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            buttons.append(
                [InlineKeyboardButton(text=channel_name, callback_data=channel_id)]
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("refresh_channels"))
async def cmd_refresh_channels(message: Message, state: FSMContext):
    await state.clear()
    try:
        channels = await get_youtube_channels(message.from_user.id)
        if channels:
            await show_channel_selection(message, channels, state)
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")

async def reset_state_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ôªÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
dp.message.register(reset_state_handler, Command(commands=["start", "auth", "upload", "refresh_channels"]))

@dp.message(Command("guide"))
async def cmd_guide(message: types.Message):
    instructions = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
        "1. `/auth` ‚Äî –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YouTube\n"
        "2. `/setup_channels` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "3. `/upload` ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n"
        "4. `/view_configs` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "5. `/delete_config` ‚Äî –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥\n\n"
        "‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ* `/auth`"
    )
    await message.answer(instructions, parse_mode="MarkdownV2")

@dp.message(Command("view_configs"))
async def cmd_view_configs(message: types.Message):
    try:
        user_data = await get_user_data(message.from_user.id)
        configs = []

        for key in user_data:
            if key.startswith(("vpn:", "proxy", "youtube_token")):
                configs.append(f"üîë {key}")

        if configs:
            await message.answer(
                "üìÇ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n" + "\n".join(configs),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /view_configs: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(Command("delete_config"))
async def cmd_delete_config(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        user_data = await get_user_data(message.from_user.id)
        configs = [key for key in user_data if key.startswith(("vpn:", "youtube_token"))]

        if not configs:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=key, callback_data=f"delete_{key}")]  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                for key in configs  # –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–±–µ–ª –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            ]
        )
        await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /delete_config: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

@dp.callback_query(F.data.startswith("delete_"))
async def handle_delete_config(callback: CallbackQuery):
    config_key = callback.data.split("_", 1)[1]
    try:
        await storage.redis.hdel(f"user:{callback.from_user.id}", config_key)
        await callback.message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_key}' —É–¥–∞–ª–µ–Ω–∞!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await callback.answer()

# ================== –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û ==================
async def get_valid_credentials(user_id: int) -> Optional[Credentials]:
    try:
        encrypted = await decrypt_user_data(user_id, "youtube_token")
        if not encrypted:
            return None

        token_data = json.loads(encrypted.decode())

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ expiry –≤ datetime
        if isinstance(token_data["expiry"], str):
            token_data["expiry"] = datetime.fromisoformat(token_data["expiry"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now(timezone.utc) > token_data["expiry"] - timedelta(minutes=5):
            credentials = Credentials(**token_data)
            credentials.refresh(Request())

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
            token_data.update({
                "token": credentials.token,
                "expiry": credentials.expiry.isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            })

            # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            encrypted = fernet.encrypt(json.dumps(token_data).encode())
            await update_user_data(user_id, {"youtube_token": encrypted.decode()})

        return Credentials(**token_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_valid_credentials: {str(e)}", exc_info=True)
        return None

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ôªÔ∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")

async def shutdown(signal, loop):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await release_lock()
    await bot.close()
    await storage.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [task.cancel() for task in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()


async def main():
    try:
        if not await acquire_lock():
            logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            sys.exit(1)

        loop = asyncio.get_running_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda: asyncio.create_task(shutdown(sig, loop)))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        await release_lock()
        logger.info("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())