import os
import sys
import logging
import tempfile
import subprocess
import asyncio
import signal
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional

from aiogram.fsm.storage.base import StorageKey
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest

from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from cryptography.fernet import Fernet

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
Path("temp").mkdir(exist_ok=True)
Path("logs").mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/youtube_bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

env_path = Path(__file__).parent / ".env"
load_dotenv(env_path)

REQUIRED_ENV = ["TELEGRAM_TOKEN", "REDIS_URL", "ENCRYPTION_KEY"]
if missing := [var for var in REQUIRED_ENV if not os.getenv(var)]:
    logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing}")
    sys.exit(1)

try:
    storage = RedisStorage.from_url(
        os.getenv("REDIS_URL"),
        connection_kwargs={
            "retry_on_timeout": True,
            "socket_connect_timeout": 5,
            "health_check_interval": 30
        }
    )
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")
    sys.exit(1)

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher(storage=storage)
fernet = Fernet(os.getenv("ENCRYPTION_KEY").encode())


# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
class UploadStates(StatesGroup):
    CONTENT_TYPE = State()
    MEDIA_UPLOAD = State()
    METADATA = State()
    VPN_CONFIG = State()
    PROXY = State()
    YOUTUBE_TOKEN = State()
    OAUTH_FLOW = State()


# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
async def get_user_data(user_id: int) -> Dict:
    try:
        data = await storage.redis.hgetall(f"user:{user_id}")
        return {k.decode(): v.decode() for k, v in data.items()}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")
        return {}


async def update_user_data(user_id: int, data: Dict) -> None:
    try:
        await storage.redis.hset(f"user:{user_id}", mapping=data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Redis: {str(e)}")


async def acquire_lock() -> bool:
    try:
        return await storage.redis.set("bot_lock", "1", nx=True, ex=60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
        return False


async def release_lock():
    try:
        await storage.redis.delete("bot_lock")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")


async def run_subprocess(cmd: list) -> bool:
    try:
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await proc.wait()
        return proc.returncode == 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        return False


async def decrypt_user_data(user_id: int, key: str) -> Optional[bytes]:
    try:
        user_data = await get_user_data(user_id)
        if encrypted := user_data.get(key):
            return fernet.decrypt(encrypted.encode())
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return None


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        key = StorageKey(
            chat_id=message.chat.id,  # ID —á–∞—Ç–∞
            user_id=message.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_id=bot.id  # ID –±–æ—Ç–∞
        )
        await storage.set_state(key=key, state=None)

        credentials = await get_valid_credentials(message.from_user.id)
        token_status = ""

        if credentials:
            expiry_time = credentials.expiry.replace(tzinfo=None)
            time_left = expiry_time - datetime.utcnow()

            if time_left.total_seconds() > 0:
                token_status = (
                    f"\n\nüîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ "
                    f"{time_left // timedelta(hours=1)} —á. "
                    f"{(time_left % timedelta(hours=1)) // timedelta(minutes=1)} –º–∏–Ω."
                )
            else:
                token_status = "\n\n‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth"

        response = (
            "üé• <b>YouTube Upload Bot</b>\n\n"
            "üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚ñ∂Ô∏è /upload - –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ\n"
            "üîë /auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YouTube\n"
            "‚öôÔ∏è /view_configs - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "üóëÔ∏è /delete_config &lt;–∫–ª—é—á&gt; - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
            "‚ùóÔ∏è <b>–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º /upload –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /auth</b>"
            f"{token_status}"
        )
        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("auth"))
async def cmd_auth(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª client_secrets.json")
    await state.set_state(UploadStates.OAUTH_FLOW)


@dp.message(UploadStates.OAUTH_FLOW, F.document)
async def handle_oauth_file(message: types.Message, state: FSMContext, bot: Bot):
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ client_secrets.json")

        file = await bot.get_file(message.document.file_id)
        path = Path("temp") / f"{message.from_user.id}_client_secrets.json"
        await bot.download_file(file.file_path, path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not path.exists():
            logger.error("–§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            return

        with open(path, "r") as f:
            data = json.load(f)
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {json.dumps(data, indent=2)}")

        if "web" not in data:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'web'.")
            return

        web_data = data["web"]
        required_fields = ["client_id", "client_secret"]
        if not all(field in web_data for field in required_fields):
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç client_id –∏–ª–∏ client_secret.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ OAuth-–ø–æ—Ç–æ–∫–∞
        flow = InstalledAppFlow.from_client_secrets_file(
            str(path),
            scopes=["https://www.googleapis.com/auth/youtube.upload"],
            redirect_uri="urn:ietf:wg:oauth:2.0:oob"
        )
        auth_url, _ = flow.authorization_url(prompt="consent")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            client_config=flow.client_config,
            scopes=flow.scopes,
            redirect_uri=flow.redirect_uri
        )
        await message.answer(f"üîë –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}")
        path.unlink()

    except json.JSONDecodeError:
        logger.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
        await message.answer("‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ client_secrets.json –∏–∑ Google Cloud Console.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(UploadStates.OAUTH_FLOW)
async def handle_oauth_code(message: types.Message, state: FSMContext):
    try:
        code = message.text.strip()
        data = await state.get_data()

        if not all(key in data for key in ['client_config', 'scopes', 'redirect_uri']):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è OAuth")
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ client_secrets.json!")
            return

        flow = InstalledAppFlow.from_client_config(
            data['client_config'],
            scopes=data['scopes'],
            redirect_uri=data['redirect_uri']
        )
        flow.fetch_token(code=code)
        credentials = flow.credentials

        token_data = {
            'token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'expiry': credentials.expiry.isoformat(),
            'client_id': credentials.client_id,
            'client_secret': credentials.client_secret,
            'token_uri': credentials.token_uri,
            'scopes': credentials.scopes
        }
        encrypted = fernet.encrypt(json.dumps(token_data).encode())
        await update_user_data(message.from_user.id, {'youtube_token': encrypted.decode()})

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

@dp.message(Command("guide"))
async def cmd_guide(message: types.Message):
    instructions = (
        "üìö **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "1. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/auth` –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª `client_secrets.json`.\n"
        "2. –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/upload`.\n"
        "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ `/view_configs`.\n"
        "4. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π `/delete_config <–∫–ª—é—á>`.\n\n"
        "‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    await message.answer(instructions, parse_mode="Markdown")

@dp.message(Command("view_configs"))
async def cmd_view_configs(message: types.Message):
    try:
        user_data = await get_user_data(message.from_user.id)
        configs = []

        for key in user_data:
            if key.startswith(("vpn:", "proxy", "youtube_token")):
                configs.append(f"üîë {key}")

        if configs:
            await message.answer(
                "üìÇ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n" + "\n".join(configs),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /view_configs: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(Command("delete_config"))
async def cmd_delete_config(message: types.Message):
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return

        config_key = args[1].strip()
        user_data = await get_user_data(message.from_user.id)

        if config_key not in user_data:
            await message.answer(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        await storage.redis.hdel(f"user:{message.from_user.id}", config_key)
        await message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_key}' —É–¥–∞–ª–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /delete_config: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")


# ================== –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û ==================
async def get_valid_credentials(user_id: int) -> Optional[Credentials]:
    try:
        encrypted = await decrypt_user_data(user_id, "youtube_token")
        if not encrypted:
            return None

        token_data = json.loads(encrypted.decode())
        expiry = datetime.fromisoformat(token_data['expiry'])

        if datetime.utcnow() > expiry - timedelta(minutes=5):
            credentials = Credentials(
                token=token_data['token'],
                refresh_token=token_data['refresh_token'],
                token_uri=token_data['token_uri'],
                client_id=token_data['client_id'],
                client_secret=token_data['client_secret'],
                scopes=token_data['scopes']
            )
            credentials.refresh(Request())

            token_data.update({
                'token': credentials.token,
                'expiry': credentials.expiry.isoformat()
            })
            encrypted = fernet.encrypt(json.dumps(token_data).encode())
            await update_user_data(user_id, {'youtube_token': encrypted.decode()})

        return Credentials(**token_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None


async def shutdown(signal, loop):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await release_lock()
    await bot.close()
    await storage.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [task.cancel() for task in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()


async def main():
    try:
        if not await acquire_lock():
            logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            sys.exit(1)

        loop = asyncio.get_running_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda: asyncio.create_task(shutdown(sig, loop)))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        await release_lock()
        logger.info("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())