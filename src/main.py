import os
import logging
import sys
import asyncio
from vpn_manager import VPNManager
from datetime import datetime, timezone
from pathlib import Path
from aiogram.fsm.state import State, StatesGroup
from instagrapi import Client
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.exceptions import TelegramRetryAfter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from cryptography.fernet import Fernet

from .youtube_service import YouTubeService
from .instagram_service import InstagramService
from src.utils import (
    load_dotenv,
    get_user_data,
    update_user_data,
    fernet,
    storage,
    REQUIRED_ENV
)

# region [ CONFIGURATION ]
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("logs/bot.log")]
)

logger = logging.getLogger(__name__)
load_dotenv(Path(__file__).parent / ".env")

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher(storage=storage)


# endregion

# region [ COMMAND HANDLERS ]
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    welcome_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Producer Sends Out Bot!</b>\n\n"
        "üìå <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n"
        "‚ñ´Ô∏è /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /guide - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\n"
        "‚ñ´Ô∏è /youtube - –†–∞–±–æ—Ç–∞ —Å YouTube\n"
        "‚ñ´Ô∏è /instagram - –†–∞–±–æ—Ç–∞ —Å Instagram\n"
        "‚ñ´Ô∏è /help - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="YouTube üé•", callback_data="youtube_main"),
            InlineKeyboardButton(text="Instagram üì∏", callback_data="instagram_main")
        ],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìñ", callback_data="guide")]
    ])

    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(Command("guide"))
async def cmd_guide(message: types.Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    guide_text = (
        "<b>üìö –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<u>YouTube —Ñ—É–Ω–∫—Ü–∏–∏:</u>\n"
        "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: /auth\n"
        "2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: /upload\n"
        "3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏: /channels\n\n"
        "<u>Instagram —Ñ—É–Ω–∫—Ü–∏–∏:</u>\n"
        "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: /instagram auth\n"
        "2. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π: /instagram messages\n"
        "3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /instagram stats\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "- –°–º–µ–Ω–∞ —è–∑—ã–∫–∞: /language\n"
        "- –ü–æ–º–æ—â—å: /help"
    )
    await message.answer(guide_text)


@dp.message(Command("instagram"))
async def cmd_instagram(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Instagram"""
    insta_text = (
        "üì∏ <b>Instagram –ú–µ–Ω–µ–¥–∂–µ—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - /instagram_auth\n"
        "2. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π - /instagram_msgs\n"
        "3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - /instagram_stats\n"
        "4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - /instagram_post"
    )
    await message.answer(insta_text)


# endregion

# region [ SERVICE INITIALIZATION ]
youtube_service = YouTubeService(bot, dp)
instagram_service = InstagramService(bot, dp)


def setup_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    youtube_service.setup_routes()
    instagram_service.setup_routes()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Instagram
    dp.callback_query.register(
        handle_instagram_callback,
        F.data.startswith("instagram_")
    )


async def handle_instagram_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–ª—è Instagram"""
    action = callback.data.split("_")[1]

    match action:
        case "auth":
            await instagram_service.handle_auth_start(callback.message)
        case "stats":
            await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†")
        case _:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


# endregion

# region [ SHUTDOWN HANDLERS ]
async def graceful_shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await storage.close()

    try:
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    try:
        await bot.close()
    except TelegramRetryAfter as e:
        logger.warning(f"Flood Control: –ø—Ä–æ–ø—É—Å–∫ –æ–∂–∏–¥–∞–Ω–∏—è {e.retry_after} —Å–µ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞: {e}")


# endregion

# region [ MAIN EXECUTION ]
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    vpn = VPNManager()
    await vpn.connect()
    setup_services()

    try:
        await dp.start_polling(bot, handle_as_tasks=False)
    except asyncio.CancelledError:
        pass
    finally:
        await graceful_shutdown()

class ProxyStates(StatesGroup):
    waiting_proxy = State()

@dp.message(Command("set_proxy"))
async def cmd_set_proxy(message: Message, state: FSMContext):
    await message.answer(
        "üîß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>—Ç–∏–ø://–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@—Ö–æ—Å—Ç:–ø–æ—Ä—Ç</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>socks5://user:pass@127.0.0.1:9050</code>"
    )
    await state.set_state(ProxyStates.waiting_proxy)

@dp.message(ProxyStates.waiting_proxy)
async def handle_proxy_input(message: Message, state: FSMContext):
    try:
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        encrypted = Fernet(os.getenv("ENCRYPTION_KEY")).encrypt(message.text.encode())
        await storage.redis.set(f"proxy:{message.from_user.id}", encrypted)
        await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()


if __name__ == "__main__":
    if missing := [var for var in REQUIRED_ENV if not os.getenv(var)]:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing}")
        sys.exit(1)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        tasks = asyncio.all_tasks(loop=loop)
        for t in tasks:
            t.cancel()
        loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
        loop.close()
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
# endregion